// First, we need to set up a backend with Node.js and Express to handle the data from MongoDB. Here are the steps we'll take:

Install necessary dependencies:

express: web application framework for Node.js
mongoose: MongoDB object modeling tool
cors: package for providing a Connect/Express middleware that can be used to enable CORS with various options
body-parser: body parsing middleware for Express
You can install them by running the following command in your project directory:


npm install express mongoose cors body-parser
Create a new file server.js in your project directory and add the following code:


const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const bodyParser = require("body-parser");

const app = express();

app.use(cors());
app.use(bodyParser.json());

mongoose.connect("mongodb://localhost/todo-list", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const todoSchema = new mongoose.Schema({
  text: String,
});

const Todo = mongoose.model("Todo", todoSchema);

app.get("/todos", async (req, res) => {
  try {
    const todos = await Todo.find();
    res.send(todos);
  } catch (err) {
    res.status(500).send(err);
  }
});

app.post("/todos", async (req, res) => {
  try {
    const todo = new Todo({
      text: req.body.text,
    });
    await todo.save();
    res.send(todo);
  } catch (err) {
    res.status(500).send(err);
  }
});

app.delete("/todos/:id", async (req, res) => {
  try {
    const todo = await Todo.findByIdAndDelete(req.params.id);
    if (!todo) res.status(404).send("No todo found");
    res.status(200).send();
  } catch (err) {
    res.status(500).send(err);
  }
});

app.listen(4000, () => console.log("Server listening on port 4000"));
This code creates an Express application, connects to the MongoDB database, defines a schema and model for the Todo collection, and sets up routes for getting, adding, and deleting todos.

Modify the frontend App.js file to fetch and send data to the backend API.

Replace the useState hook for todos and filteredTodos with an empty array:


const [todos, setTodos] = useState([]);
const [filteredTodos, setFilteredTodos] = useState([]);
Modify the useEffect hook to fetch todos from the backend API:


useEffect(() => {
  async function fetchData() {
    const response = await fetch("http://localhost:4000/todos");
    const data = await response.json();
    setTodos(data);
    setFilteredTodos(data);
  }
  fetchData();
}, []);
Modify the handleAddTodo function to send a new todo to the backend API:


const handleAddTodo = async (e) => {
  e.preventDefault();
  const newTodo = { text: e.target.add.value };
  const response = await fetch("http://localhost:4000/todos", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(newTodo),
  });
  const data = await response.json();
  setTodos([...todos, data]);
  e.target.reset();
};



Sure! So, let's start by creating a MongoDB database to store our todos.

First, we need to create a MongoDB Atlas account (if you don't have one already). Go to https://www.mongodb.com/cloud/atlas and sign up for a free account.
Once you're signed in, create a new project and a new cluster.
Create a new database and a new collection. In our case, we can name the database "todo-app" and the collection "todos".
In the "todos" collection, we can create documents that look like this:

{
  "_id": ObjectId("6051d8c4e4f71920343bdc2a"),
  "text": "Practice coding",
  "completed": false
}
The _id field is automatically generated by MongoDB and we can use it to uniquely identify each document. The text field stores the todo text and the completed field is used to keep track of whether the todo is completed or not.

Next, we can create an Express API to interact with this database.

Create a new Node.js project and install the necessary dependencies (express, mongodb, etc.).
Create an index.js file and set up a basic Express server.
Create a new MongoDB client and connect to the database.
javascript
Copy code
const MongoClient = require('mongodb').MongoClient;
const uri = <MONGODB_URI>;
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

client.connect(err => {
  const collection = client.db("todo-app").collection("todos");
  // ...
});
Replace <MONGODB_URI> with the connection string for your MongoDB Atlas cluster. You can find this string in the "Connect" tab of your cluster.

Define the routes for your API.
Here's an example of how you can define a route to get all the todos:


app.get('/api/todos', async (req, res) => {
  const todos = await collection.find().toArray();
  res.send(todos);
});
This route uses the find method of the MongoDB collection to retrieve all the todos and sends them back to the client as a JSON response.

Finally, modify your React app to use this API instead of the local state.
Replace the handleAddTodo function with a call to the /api/todos endpoint to add a new todo to the database. Similarly, replace the handleDeleteTodo function with a call to the /api/todos/:id endpoint to delete a todo from the database.

I hope this helps! Let me know if you have any questions or need further clarification.